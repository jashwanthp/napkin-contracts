generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  "postgresql://postgres.warvilngqptqxlrpkpmm:%26jf%24wKZ6nd%26-fb3@aws-1-ap-south-1.pooler.supabase.com:5432/postgres"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  contracts     Contract[]
  signatures    Signature[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Contract {
  id          String   @id @default(cuid())
  title       String
  content     String?  @db.Text
  filePath    String?
  status      ContractStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  
  recipients  ContractRecipient[]
  signatures  Signature[]
  
  @@map("contracts")
}

model ContractRecipient {
  id         String @id @default(cuid())
  email      String
  name       String?
  role       RecipientRole @default(SIGNER)
  status     RecipientStatus @default(PENDING)
  signedAt   DateTime?
  
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId String
  
  @@map("contract_recipients")
}

model Signature {
  id          String   @id @default(cuid())
  signatureData String @db.Text  // Base64 encoded signature
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  
  contract    Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId  String
  
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  
  @@map("signatures")
}

enum ContractStatus {
  DRAFT
  SENT
  PARTIALLY_SIGNED
  COMPLETED
  CANCELLED
}

enum RecipientRole {
  SIGNER
  VIEWER
  APPROVER
}

enum RecipientStatus {
  PENDING
  VIEWED
  SIGNED
  DECLINED
}